;-----------
;  CONVOI
;-----------

;Variables propres au convoi
convois-own[
  incoming-queue ; Reception des messages de communication
  attacked?      ; Vrai si le convoi est attaqué
  energy         ; Energie restante a la voiture
  finished?      ; Est ce que le but est atteint
  leader?        ; Indique si la voiture est leader
  to-protect?    ; La voiture a proteger
  my-as-path     ; ID du chemin A*
  observations   ; Liste d'observations
  leader-drone   ; who du leader des drones
]


; Initialisation du convoi
to setup-convois
  if nb-cars > 0 [

    ; Variables délimitant la zone de départ pour répartir les véhicules
    let base-min-pxcor min [pxcor] of (patches with [hangar? and pzcor = mapAlt])
    let base-max-pxcor max [pxcor] of (patches with [hangar? and pzcor = mapAlt])
    let base-min-pycor min [pycor] of (patches with [hangar? and pzcor = mapAlt])
    let base-max-pycor max [pycor] of (patches with [hangar? and pzcor = mapAlt])

    ; creation des voitures du convoi et cortege
    create-convois nb-cars
    ask convois
    [
      ; Initialisation apparence NetLogo
      set shape "car"
      set color magenta

      ; Init de la queue de communication
      set incoming-queue []

      ; Initialisation des variables du convoi
      set convoi-speed 0.02 * simu-speed
      set maxdir-convoi 10 * simu-speed
      set heading 0
      set roll 0
      set pitch 0
      set finished? false
      set leader? false
      set to-protect? false
      set my-as-path 0
      set full-convoi? true
      set leader-drone -1
      set energy convoi-energy
      set observations []

      ; On affiche les noms des véhicules
      set label who
    ]

    ; On récupère les who du premier et dernier véhicule
    let first-car min [who] of convois
    let last-car max [who] of convois

    ; On initialise le leader
    ask convoi first-car [
      set leader? true
      set color orange
      move-to patch base-max-pxcor base-max-pycor 1
    ]

    ; On met le dernier véhicule du convoi comme véhicule à protéger
    ask convoi last-car [
      set to-protect? true
      set color yellow
    ]

    ; On met les autres véhicules les uns après les autres
    if nb-cars > 1 [
      
      ; Le leader est déjà initialisé, on ne sélectionne que les suivants
      ask turtle-set sort-on [who] convois with [who > first-car] [
        
        ; On lie la voiture à la suivante
        create-convoi-link-to turtle (who - 1)
        
        ; On initialise les coordonnées des véhicules suivants
        ifelse (who - 1) mod 2 = 0 [ set xcor base-min-pxcor ] [ set xcor base-max-pxcor ] ; a gauche ou a droite selon le nombre (pair ou impair respectivement)
        set ycor base-max-pycor - (floor (who / 2) / (nb-cars / 2) * (base-max-pycor - base-min-pycor)) ; d'une rangee de plus en plus basse toutes les deux voitures
        set zcor solAlt
      ]
    ]    
  ]
end


; Procedure principale de gestion des convois
to convois-think

  if nb-cars > 0 [
    
    ; Calcul du plan AStar pour chaque leader si necessaire
    foreach sort-on [who] turtle-set convois with [leader? and not finished?] [
      leader-think ?
      leader-move ?
    ]

    ; Deplacement des voitures-cortege: elles ne font que suivre la voiture devant eux (avec laquelle elles sont liées)
    ask convois with [not leader? and not finished?] [
      if any? my-out-convoi-links [
        move-convoi ([patch-here] of one-of out-convoi-link-neighbors) true true
      ]
    ]
  ]
end


; Actions spécifiques du leader
;   - Si adversaires à proximité : on sépare le convoi en deux
;   - Initialisation du chemin A* s'il n'est pas encore défini    
;   - Reception des messages en attente
to leader-think [ this-leader ]

  ; on verifie si le leader a recu des messages
  ask convois [ if leader? [ message-recu-convoi ] ]

  ;On regarde s'il y a des ennemis qui approchent : si oui on separe le convoi
  if full-convoi? and nb-cars > 3 and any? enemies with [ distance this-leader <= vision-convoi ] [
    
     show "Ennemis proches : Separation du convoi pour diversion"
 
    ; On sépare le convoi en deux : le premier prend un chemin quelconque
    ; Le deuxieme (qui contient le vehicule important) va vers l'objectif
    let middle ( item (nb-cars / 2) (sort-on [who] turtle-set convois ) )
    let next ( item (nb-cars / 2 - 1) (sort-on [who] turtle-set convois ) )

    ; On separe le milieu et son suivant, et on passe les donnees leader au premier du nouveau convoi  
    separation  middle next
    pass-leadership this-leader middle
        
    ;On change notre chemin
    ask this-leader [ set my-as-path 1 ]
    set full-convoi? false
  ]
        
  ; Recalcule le chemin si nécessaire (par exemple au début de la simulation ou quand le convoi se sépare)
  let path-id ([my-as-path] of this-leader) 
  if empty? as-path or length as-path < (path-id + 1) or empty? (item path-id as-path) [ ; s'il n'y a pas encore de chemin du tout, ou pas de chemin pour cette voiture, on cree un plan AStar
 
    ; Cree le plan AStar (attention a ca que le patch start soit au niveau ou il y a les obstacles, ici pzcor = mapAlt pour les obstacles)
    let start-patch min-one-of (patches with [pzcor = mapAlt and not obstacle?]) [distance this-leader] ; on s'assure de choisir comme patch de depart un patch libre sans obstacle, sinon quand on split un convoi il se peut qu'il soit sur un obstacle et qu'il ne puisse jamais generer de chemin
    let destination (one-of patches with [objectif?])
        
    ; Si on est sur le A star de retour (path 1), on demande de rentrer a la base 
    if path-id = 1 and length as-path < 2[ set destination patch 6 4 mapalt ]
          
    let new-path plan-astar start-patch destination false

    ; S'il n'y a pas deja une entree pour cette voiture on la cree
    ifelse length as-path < (path-id + 1) [
      set as-path lput new-path as-path
    ]
    ; Sinon on remplace l'entree pour cette voiture par le nouveau plan
    [
      set as-path replace-item path-id as-path new-path
    ]
  ]
 
end


; Fonction de déplacement du leader sur le chemin A*
to leader-move [ this-leader ]
  ; Recupere le plan AStar
  let path item ([my-as-path] of this-leader) as-path
  if not empty? path [
 
    ; Deplacement par waypoints: on se deplace jusqu'au prochain patch du chemin jusqu'à l'atteindre
    let next-patch first path
    
    ; Mise a niveau de pzcor au cas ou le chemin a ete calculé sur un autre plan
    set next-patch [patch-at 0 0 ([pzcor] of this-leader - pzcor)] of next-patch
    
    ; Deplacement vers le prochain waypoint
    if next-patch != [patch-here] of this-leader [
      ask this-leader [ move-convoi next-patch false false]
    ]
 
    ; Si on a atteint ce patch, on le supprime de la liste, et on va donc continuer vers le prochain patch du chemin
    if [patch-here] of this-leader = next-patch [
      set path remove-item 0 path
      set as-path replace-item ([my-as-path] of this-leader) as-path path
      if debug [ show (word "Waypoint atteint: " [patch-here] of this-leader ", prochain: " next-patch ) ]
      
      ; On communique une position future aux drones pour qu'ils puisse prendre les devants
      if length path >= 4 [
        let p item 3 path
        ask this-leader [
          communication-DC "new-position-convoi" leader-drone (word ([pxcor] of p) " " ([pycor] of p))
        ]
      ]
    ]
  ] 
  ask this-leader [ check-convoi-finished self ]
end


; Vérifie si la mission a été un succès 
to-report check-win
  if  mission-failed? [ report 0 ] ; si la voiture a proteger meurt
  if  mission-completed? [ report 1 ] ; si la voiture a proteger a atteins sa cible
  report -1
end


; Permet de faire avancer les voitures d'un convoi (cortege et leader)
; Maintien egalement une petite distance afin de ne pas "rentrer" dans la voiture de devant
to move-convoi [goal slowdown? cortege?]
  ; Calcul de l'angle avec la cible
  let headingFlag heading
  ifelse cortege?
  [ set headingFlag (towards goal) ] ; Si c'est un cortege, on veut qu'il suive toujours le leader par le chemin le plus court (surtout en play-mode ou le joueur n'est pas limite par le nowrap)
  [ set headingFlag (towards-nowrap goal) ]
  let dirCorrection subtract-headings headingFlag heading
  ; Arrondissement de l'angle (on ne veut pas faire de micro tournant)
  set dirCorrection precision dirCorrection 2
  ; Limite de l'angle, pour que ce soit plus realiste (la voiture ne peut pas faire un demi-tour sur place!)
  ifelse dirCorrection > maxdir-convoi [ ; limite a droite
    set dirCorrection maxdir-convoi
  ]
  [
    if dirCorrection < maxdir-convoi * -1 [ ; limite a gauche
      set dirCorrection maxdir-convoi * -1
    ]
  ]

  ; On tourne
  rt dirCorrection

  ; Limite de vitesse pour les voitures-cortege (pour pas qu'elles ne rentrent dans la voiture leader)
  let tmp-speed convoi-speed
  if slowdown? [
    if distance-nowrap goal < 1.1 [
      set tmp-speed tmp-speed / 20
    ]
    if distance-nowrap goal < 0.9 [
      set tmp-speed 0
    ]
  ]

  ; Deplacement!
  set pitch 0 ; make sure there's no pitch ever, else the car will disappear in the ground
  fd tmp-speed ; Avance
end


; Supprime le lien entre deux voitures du convoi
to separation [turtle1 turtle2] ; turtle1 précède turtle2
  show (word "Separation entre " turtle1 " et " turtle2 )
  ask turtle1 [
    ; Suppression du lien
    ask convoi-link [who] of turtle1 [who] of turtle2 [ die ]
  ]
end


; Gestion de l'arrivée du convoi
to check-convoi-finished [turtle1]
  ; Critere d'arret: on est a cote de l'objectif
  ; Note: on veut etre a cote de l'objectif et pas directement dessus car on est une voiture, donc il se peut qu'on tourne indefiniment autour sans arriver directement a arriver dessus a cause de la limite d'angle de rotation.
  if any? [neighbors6-nowrap with [objectif?]] of patch-here [ ; On ne bouge pas si on est arrive au but!                                                          

    set finished? true
    if convoi-to-protect turtle1 [ set mission-completed? true ]
 
    ; Fini aussi pour toutes les voitures-cortege qui suivent ce leader
    let linked-cars (list in-convoi-link-neighbors)
    while [not empty? linked-cars] [ ; on fait une boucle pour recursivement mettre a finished? = true toutes les voitures liees entre elles dans ce cortege

      let next-linked-cars []
      foreach linked-cars [
        ask ? [
          set finished? true
          if any? in-convoi-link-neighbors [ ; on recupere les voitures-cortege liees a la voiture-cortege en cours
            set next-linked-cars lput in-convoi-link-neighbors next-linked-cars
          ]
        ]
      ]
      set linked-cars next-linked-cars
    ]
  ]
end


; Renvoie vrai si la voiture à protéger appartient au même convoi que turtle1
to-report convoi-to-protect [turtle1]
  if [to-protect?] of turtle1 [ report true ]
  ; S'il n'a pas de voiture derrière lui, faux car la voiture à protéger est la dernière
  if not any? [in-convoi-link-neighbors] of turtle1 [ report false ]
  ; Récursion
  let suivant one-of [in-convoi-link-neighbors] of turtle1
  report convoi-to-protect suivant
end


; communication voiture-voiture
to communication-CC [perf receiver content] 
  ; Verifie si le receiver est à portée 
  if any? receiver in-radius-nowrap convoi-communication [ 
    let m create-message perf 
    set m add-receiver first [who] of receiver m 
    set m add-content content m send m ] 
end


; reception de messages d'observation des drones
to message-recu-convoi
  let msg ""
  set msg get-message
  if msg != "" and get-performative msg = "obs" [
    let string get-content msg
    if debug [ show (word "Leader voiture recoit " string) ]
    ; MAJ structure données    
    set observations lput string observations 
   ]
end


;Gestion du cas où on est touchés par une rocket ennemi
to convoi-touched [target]

  ask target [
    
    ; Perte d'energie
    set energy energy - 10
    if energy < convoi-energy / 2 [set color color - 2]
    if debug [show ("Aie")]
    
    ; Gestion du cas où on meurt
    if energy <= 0 [
      ifelse [to-protect?] of target [
        set mission-failed? true
      ]
      [
        pass-link
      ]
      die
    ]
  ]
end


; Cette fonction sert a lier le véhicule suivant au précédent lorsque le véhicule va mourir
to pass-link
  let next in-convoi-link-neighbors
  let prev out-convoi-link-neighbors
  if any? next [ separation one-of next self ]
  if any? prev [ separation self one-of prev]
  
  if any? prev and any? next [ ask next [ create-convoi-link-to turtle ([who] of one-of prev - 1) ] ]
  
  ; Si on est leader on passe aussi
  if leader? and any? next[
    pass-leadership self one-of next
  ]
end


;Cette fonction communique les informations nécessaires à un changement de leader dans le convoi
to pass-leadership [ from next ]
  ask next [
    set color orange
    set leader? true
    set my-as-path [my-as-path] of from
    set leader-drone [leader-drone] of from
    
    let my-who who
    ask drone leader-drone [ set leader-convoi my-who ]
  ]
end

