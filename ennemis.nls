;-----------
;  ENEMIES
;-----------

enemies-own[
  incoming-queue
  dead?
  speed maxdir   ; maximal speed of a car, and max angle
  last-send-time ; communication historical time-stamp
  rayon-vision   ; rayon de vision des ennemis
  approach?
  mytarget
  mypath
  next-shot-time ; Compteur qui verifie que l'enemy n'a pas tiré recemment
  ]


to setup-enemies
  if nb-enemies > 0 [
    create-enemies nb-enemies
    ask enemies [
      set shape "car"
      set color red

     ; Init vars enemies
      set speed 0.05 * simu-speed
      set maxdir 10 * simu-speed
      set roll 0
      set pitch 0
      set dead? false

      set approach? false
      set mytarget nobody
      set mypath []

      set next-shot-time 0

      set rayon-vision vision-enemy
      set heading random 360 ; Dans une direction aléatoire
    ]

    ask turtle-set enemies [
      let rand one-of (patches with [pzcor = mapAlt and not obstacle? and distance (patch 0 0 0) > 25])
      setxy [pxcor] of rand [pycor] of rand ; les ennemis n'apparaissent pas sur un obstacle
      set zcor solAlt
    ]
  ]
end


to move-enemy
  ask enemies [
    if not approach? or mytarget = nobody [
      ; Mouvement aléatoire
      if random-float 1 <= 0.08 [ ;Probabilité de changer de direction
        let pos one-of neighbors4 with [ 
          abs (pxcor - [pxcor] of myself) <= 1
          and abs (pycor - [pycor] of myself) <= 1
          and not obstacle?
          and not any? other convois-here
        ]
        if pos != nobody [
          face pos ; Je me tourne vers une case voisine envisageable
        ]
      ]

      if (not [obstacle?] of patch-ahead 1 ; ne roule pas dans l'eau/Sur la montagne
        and not any? other turtles-on patch-ahead 1 ; ne va pas sur la même case qu'un autre agent
        and abs ([pxcor] of patch-ahead 1 - [pxcor] of self) <= 1 ; pas d'effets de bord
        and abs ([pycor] of patch-ahead 1 - [pycor] of self) <= 1
        ) [fd speed] ; Avance
    ] 
    observe-enemy  ; regarde autour de lui dans un rayon de rayon-vision
  ]

  foreach sort-on [who] turtle-set enemies with [approach?]
  [ approach ?]

end


to observe-enemy
  let target nobody
  if any? convois in-cone-nowrap rayon-vision 180 [
    set target min-one-of convois in-cone-nowrap rayon-vision 180 [distance-nowrap myself] ; cible la plus proche
  ]
  if target = nobody and any? drones in-cone-nowrap rayon-vision 180[
    set target min-one-of drones in-cone-nowrap rayon-vision 180 [distance-nowrap myself] ; cible la plus proche
  ]
   
  if target != nobody [
    ; On recupere le patch le plus proche de notre cible pour le déplacement
    let l [patches in-radius-nowrap portee-enemy] of target
    set l l with [not obstacle?]    
    set mytarget min-one-of l [distance-nowrap myself]

    ; Verifie si sa cible est atteignable
    ifelse (distance-nowrap target <= portee-enemy) [
      
      ;On lance une attaque si on a eu le temps de recharger
      if ticks > next-shot-time [
        attack-target target precision-enemy portee-enemy
        set next-shot-time ticks + time-between-shots
      ]
     ]
     [ set approach? true ]
  ]
end


; Cas où la cible est hors de portée d'un ennemi - il se rapproche
to approach [ennemi]

  let path plan-astar ([patch-here] of ennemi) ([mytarget] of ennemi) false;] ;calcul du plus court chemin vers la cible ?
                                                                              ; Si pas de chemin, l'ennemi abandonne                               
  if path = [] [ask ennemi [set approach? false set mypath [] set mytarget nobody] stop]
  ; S'il y a un chemin et que l'ennemi n'en a pas, il le suit
  ask ennemi [
    if mypath = [] [set mypath path]
    ; foreach mypath [ask ? [set pcolor pink]]
    let next first mypath
    if next != patch-here [

      set heading towards-nowrap next
      set pitch 0
      if not any? other turtles-on patch-ahead 1 [fd speed]
    ]
    if patch-here = next [ set mypath remove-item 0 mypath ]
  ]
end